#!/usr/bin/env python3.7

import argparse
import json
import signal
import os

parser = argparse.ArgumentParser()
parser.add_argument('-c', help='config')
parser.add_argument('-t', help='table')
parser.add_argument('--add-table', action='store_true', help='add new table')
parser.add_argument('--remove-table', action='store_true', help='remove table')
parser.add_argument('-ad', help='add domain')
parser.add_argument('-rd', help='remove domain')
parser.add_argument('-ar', help='add regex')
parser.add_argument('-rr', help='remove regex')
parser.add_argument('-s', action='store_true', help='show table')
parser.add_argument('--reload', action='store_true', help='reload')
args = parser.parse_args()

def get_config_file():
    config_file = args.c
    if not config_file:
        config_file = "%s/.ipmonitor.json" % os.path.expanduser('~')
    return config_file

def load_config():
    config_file = get_config_file()
    with open(config_file, 'r') as infile:
        config = json.load(infile)
    return config

def save_config(config):
    data = json.dumps(config)
    config_file = get_config_file()
    with open(config_file, 'w') as outfile:
        outfile.write(data)

def require_table():
    if not args.t:
        raise Exception("table required")
    return args.t

if args.add_table:
    table = require_table()
    config = load_config()
    if table in config:
        raise Exception("table already exists: %s" % table)
    config[table] = {}
    save_config(config)

if args.remove_table:
    table = require_table()
    config = load_config()
    if not table in config:
        raise Exception("table not not exist: %s" % table)
    if not len(config[table]) == 0:
        raise Exception("will not remove non-empty table: %s" % table)
    del config[table]
    save_config(config)

def add(key, value):
    table = require_table()
    config = load_config()
    if not table in config:
        raise Exception("unknown table: %s" % table)
    if not key in config[table]:
        config[table][key] = []
    if not value in config[table][key]:
        config[table][key].append(value)
    save_config(config)

if args.ad:
    add('domains', args.ad)

if args.ar:
    add('regexs', args.ar)

def remove(key, value):
    table = require_table()
    config = load_config()
    if not table in config:
        raise Exception("unknown table: %s" % table)
    if not key in config[table]:
        raise Exception("unknown value in %s: %s" % (key, value))
    if not value in config[table][key]:
        raise Exception("unknown value in %s: %s" % (key, value))
    config[table][key].remove(value)
    if len(config[table][key]) == 0:
        del config[table][key]
    save_config(config)

if args.rd:
    remove('domains', args.rd)

if args.rr:
    remove('regexs', args.rr)

if args.s:
    table = require_table()
    config = load_config()
    if not table in config:
        raise Exception("unknown table: %s" % table)
    print(json.dumps(config[table], sort_keys=True, indent=2, separators=(',', ': ')))

# last action since we want to reload from all other actions
if args.reload:
    with open('/var/run/ipmonitor.pid.child', 'r') as infile:
        pid = int(infile.read().strip())
    os.kill(pid, signal.SIGUSR1)
