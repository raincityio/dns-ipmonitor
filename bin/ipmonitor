#!/usr/bin/env python3.7

import socket
import re
import asyncio
import json
import argparse
import subprocess
import time
import os
import signal
import logging
import dnstap_client

default_state_file = '/var/db/ipmonitor.state'
default_config_file = "%s/.ipmonitor.json" % os.path.expanduser('~')

default_update_domains_period = 30
default_sync_period = 60
default_ttl = 3600

async def get_ips(domain):
    try:
        loop = asyncio.get_event_loop()
        records = await loop.getaddrinfo(domain, None)
        ips = set()
        for record in records:
            ips.add(record[4][0])
        return ips
    except socket.gaierror as e:
        logging.error(e)
        return set()

async def pft_execute(table, cmd, *args):
    cmd_args = ['-q', '-t', table, '-T', cmd]
    cmd_args.extend(args)
    logging.debug('pfctl %s' % ' '.join(cmd_args))
    rc = await (await asyncio.create_subprocess_exec('pfctl', *cmd_args)).wait()
    if not rc == 0:
        raise Exception("pfctl failed")

async def pft_flush(table):
    await pft_execute(table, 'flush')

async def pft_add(table, ip):
    await pft_execute(table, 'add', ip)

async def pft_delete(table, ip):
    await pft_execute(table, 'delete', ip)

async def pft_show(table):
    proc = await asyncio.create_subprocess_exec('pfctl', '-q', '-t', table, '-T', 'show', stdout=asyncio.subprocess.PIPE)
    try:
        ips = set()
        while True:
            line = await proc.stdout.readline()
            if len(line) == 0:
                break
            ips.add(line.decode('ascii').strip())
    finally:
        await proc.wait()
    if not proc.returncode == 0:
        raise Exception("pfctl failed")
    return ips

class JsonState:

    def __init__(self, state_file):
        self.state_file = state_file
        self.state = JsonState._load(state_file)

    @staticmethod
    def _load(state_file):
        if os.path.exists(state_file):
            with open(state_file, 'r') as infile:
                state = json.load(infile)
        else:
            state = {}
        return state

    def save(self):
        data = json.dumps(self.state)
        with open(self.state_file, 'w') as outfile:
            outfile.write(data)

    def get_tables(self):
        return self.state.keys()

    def get_domains(self, table):
        if not table in self.state:
            return set()
        table = self.state[table]
        return table.keys()

    def remove_domain(self, table, domain):
        del self.state[table][domain]

    def remove_table(self, table):
        del self.state[table]

    def add_table(self, table):
        if not table in self.state:
            self.state[table] = {}

    def update_domain(self, table, domain, ips):
        if not table in self.state:
            self.state[table] = {}
        table = self.state[table]
        if not domain in table:
            table[domain] = {}
        domain = table[domain]
        new_ips = set()
        for ip in ips:
            if not ip in domain:
                new_ips.add(ip)
            domain[ip] = time.time()
        return new_ips

    def get_ips(self, table):
        if not table in self.state:
            return set()
        table = self.state[table]
        ips = set()
        current_time = time.time()
        for domain in table.values():
            to_remove = []
            for (ip, update_time) in domain.items():
                if (update_time + default_ttl) > current_time:
                    ips.add(ip)
                else:
                    to_remove.append(ip)
            for ip in to_remove:
                del domain[ip]
        return ips

class Config:

    def __init__(self, config_file):
        self.config_file = config_file
        self.tables, self.domains, self.regexs = self._load(config_file)

    def reload(self):
        try:
            self.tables, self.domains, self.regexs = self._load(self.config_file)
        except Exception as e:
            logging.error(e)

    @staticmethod
    def _load(config_file):
        tables = []
        domains = {}
        regexs = {}
        if os.path.exists(config_file):
            with open(config_file, 'r') as infile:
                config = json.load(infile)
        else:
            config = {}
        for table in config:
            tables.append(table)
            domains[table] = []
            regexs[table] = []
            if 'domains' in config[table]:
                for domain in config[table]['domains']:
                    domains[table].append(domain)
            if 'regexs' in config[table]:
                for regex in config[table]['regexs']:
                    regexs[table].append(re.compile(regex))
        return (tables, domains, regexs,)

    def get_tables(self):
        return self.tables

    def get_domains(self, table):
        return self.domains[table]

    def get_regexs(self, table):
        return self.regexs[table]

def sync_state(config, state):
    # prime the state
    for table in config.get_tables():
        state.add_table(table)
        for domain in config.get_domains(table):
            state.update_domain(table, domain, [])

    # clear irrelviant state
    tables_to_remove = []
    for table in state.get_tables():
        if not table in config.get_tables():
            tables_to_remove.append(table)
            continue
        domains_to_remove = []
        for domain in state.get_domains(table):
            if domain in config.get_domains(table):
                continue
            found = False
            for regex in config.get_regexs(table):
                if regex.match(domain):
                    found = True
                    break
            if not found:
                domains_to_remove.append(domain)
        for domain in domains_to_remove:
            state.remove_domain(table, domain)
    for table in tables_to_remove:
        state.remove_table(table)

async def sync_tables(state):
    for table in state.get_tables():
        pft_ips = await pft_show(table)
        state_ips = state.get_ips(table)
        for ip in (pft_ips - state_ips):
            await pft_delete(table, ip)
        for ip in (state_ips - pft_ips):
            await pft_add(table, ip)

async def main():
    logging.basicConfig(level=logging.DEBUG)

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', default=default_config_file, help='config file')
    parser.add_argument('-s', default=default_state_file, help='state file')
    args = parser.parse_args()

    config = Config(args.c)
    state = JsonState(args.s)
    sync_state(config, state)

    loop = asyncio.get_event_loop()
    
    finish = asyncio.Event()
    def on_signal(*args):
        finish.set()
    loop.add_signal_handler(signal.SIGINT, on_signal)
    loop.add_signal_handler(signal.SIGTERM, on_signal)
    
    uncaught_exception = None
    def uncaught_handler(loop, context):
        nonlocal uncaught_exception
        if 'exception' in context:
            uncaught_exception = context['exception']
        else:
            uncaught_exception = Exception(context['message'])
        finish.set()
    loop.set_exception_handler(uncaught_handler)

    reload_config = asyncio.Event()
    def reload_signal(*args):
        reload_config.set()
    loop.add_signal_handler(signal.SIGUSR1, reload_signal)

    def dump_signal(*args):
        for task in asyncio.all_tasks():
            logging.info(task)
    loop.add_signal_handler(signal.SIGUSR2, dump_signal)

    async def tapper_callback(domain, ip):
        domain = domain[:-1]
        for table in state.get_tables():
            if domain in state.get_domains(table):
                new_ips = state.update_domain(table, domain, [str(ip)])
                for new_ip in new_ips:
                    await pft_add(table, new_ip)
            else:
                for regex in config.get_regexs(table):
                    if regex.match(domain):
                        new_ips = state.update_domain(table, domain, [str(ip)])
                        for new_ip in new_ips:
                            await pft_add(table, new_ip)
                        break

    tapper = dnstap_client.Tapper(tapper_callback)
    asyncio.create_task(tapper.loop())

    async def update_domains():
        while True:
            for table in state.get_tables():
                for domain in state.get_domains(table):
                    ips = await get_ips(domain)
                    new_ips = state.update_domain(table, domain, ips)
                    for new_ip in new_ips:
                        await pft_add(table, new_ip)
            await asyncio.sleep(default_update_domains_period)
            
    asyncio.create_task(update_domains())

    async def reload_config_handler():
        while True:
            await reload_config.wait()
            logging.debug("reloading config")
            config.reload()
            sync_state(config, state)
            state.save()
            await sync_tables(state)
            reload_config.clear()

    asyncio.create_task(reload_config_handler())

    async def table_syncer():
        while True:
            state.save()
            await sync_tables(state)
            await asyncio.sleep(default_sync_period)

    asyncio.create_task(table_syncer())

    try:
        await finish.wait()
    finally:
        state.save()
        # technically, the flush may occur concurrently with
        # pft_add, so flushing may not get everything
        # i guess i could surround the asynio.run with a finally
        # that takes care of this sort of stuff
        for table in state.get_tables():
            await pft_flush(table)
        if not uncaught_exception is None:
            raise uncaught_exception

if __name__ == '__main__':
    asyncio.run(main())
